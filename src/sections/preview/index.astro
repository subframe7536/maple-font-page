---
import Section from '@/components/section.astro'
import { useIndexTranslation } from '@/locales/i18n'

import CodePanel from './code-panel.astro'

const { subTitle, title } = await useIndexTranslation(Astro.currentLocale, 'preview')

const data = {
  id: 'preview',
  title,
  subTitle,
}

const tsxCode = `function Counter() {
  const [count, setCount] = createSignal(1);
  const inc = () =>
    setCount(count => count + 1);

  return (
    <button type="button" onClick={inc}>
      {count()}
    </button>
  );
}`

const vueCode = `<script setup>
import { ref, computed } from 'vue'

const count = ref(0)
const dbl = computed(() => count.value * 2)
</script>

<template>
  {{ dbl }}
  <button @click="count++">Count</button>
</template>`

const javaCode = `@SpringBootApplication
public class TodoApplication {

    public static void main(String[] args) {
        SpringApplication.run(TodoApplication.class, args);

        Arrays.asList("foo", "bar", "baz")
          .stream()
          .map(String::toUpperCase)
          .forEach(System.out::println)
    }

}`

const goCode = `func main() {
    http.HandleFunc("/", func(writer http.ResponseWriter, request *http.Request) {
        message := strings.Join([]string{"Hello", "world!"}, " ")
        _, err := writer.Write([]byte(message))
        if err != nil {
            panic(err)
        }
    })

    if err := http.ListenAndServe(":8080", nil); err != nil {
        panic(err)
    }
}`

const pythonCode = `def merge(x1, x2):
    if isinstance(x1, dict) and isinstance(x2, dict):
        res = x1.copy()
        for k, v in x2.items():
            res[k] = merge(res[k], v) if k in res else v
        return res
    elif isinstance(x1, list) and isinstance(x2, list):
        res = list(x1)
        res.extend(x2)
        return res
    elif x1 == x2:
        return x1
    else:
        raise ValueError(f"Cannot merge '{x1!r}' and '{x2!r}'")


if __main__ == "main":
    merge(0x23, 0xa1)        `

const cppCode = `void quicksort(auto begin, auto end) {
    if (begin != end) {
        Comparable auto pivot = *std::next(begin, std::distance(begin, end) / 2);
        const auto [lt, gt] = ::partition(begin, end, pivot, std::less<>());
        quicksort(begin, lt);
        quicksort(gt, end);
    }
}

int main() {
    std::vector<int> Vec{5, 0, 1, 5, 3, 7, 4, 2};
    quicksort(Vec.begin(), Vec.end());
    std::for_each(
        Vec.begin(),
        Vec.end(),
        [](const int Elem) {std::cout << Elem << " "; }
    );
}`

const items = [
  {
    lang: 'tsx',
    title: 'TypeScript JSX',
    code: tsxCode,
  },
  {
    lang: 'vue',
    title: 'Vue',
    code: vueCode,
  },
  {
    lang: 'java',
    title: 'Java',
    code: javaCode,
  },
  {
    lang: 'go',
    title: 'Go',
    code: goCode,
  },
  {
    lang: 'python',
    title: 'Python',
    code: pythonCode,
  },
  {
    lang: 'cpp',
    title: 'C++',
    code: cppCode,
  },
] as const
---
<Section {...data}>
  <div class="grid grid-cols-1 gap-(col-8 row-4) md:grid-cols-2">
    {items.map(info => <CodePanel {...info} />)}
  </div>
</Section>
