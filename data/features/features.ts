// Auto generated by `python task.py fea`
// @prettier-ignore
/* eslint-disable */

export interface FeatureDescription {
  /** Default ligatures */
  calt: string
  /** Normalize special symbols (`@ $ & % Q => ->`) */
  cv01: string
  /** Alternative `a` with top arm, no effect in italic style */
  cv02: string
  /** Alternative `i` without left bottom bar */
  cv03: string
  /** Alternative `l` with left bottom bar, like consolas, will be overrided by `cv35` in italic style */
  cv04: string
  /** Alternative `g` in double story style, no effect in italic style */
  cv05: string
  /** Alternative `i` without bottom bar, no effect in italic style */
  cv06: string
  /** Alternative `J` without top bar, no effect in italic style */
  cv07: string
  /** Alternative `r` with bottom bar, no effect in italic style */
  cv08: string
  /** Alternative `7` with middle bar, no effect in italic style */
  cv09: string
  /** Alternative `Z` and `z` with middle bar, no effect in italic style */
  cv10: string
  /** Alternative italic `a` with top arm */
  cv31: string
  /** Alternative Italic `f` without bottom tail */
  cv32: string
  /** Alternative Italic `i` and `j` with left bottom bar and horizen top bar */
  cv33: string
  /** Alternative Italic `k` without center circle */
  cv34: string
  /** Alternative Italic `l` without center tail */
  cv35: string
  /** Alternative Italic `x` without top and bottom tails */
  cv36: string
  /** Alternative Italic `y` with straight intersection */
  cv37: string
  /** Alternative italic `g` in double story style */
  cv38: string
  /** Alternative Italic `i` without bottom bar */
  cv39: string
  /** Alternative italic `J` without top bar */
  cv40: string
  /** Alternative italic `r` with bottom bar */
  cv41: string
  /** Alternative italic `7` with middle bar */
  cv42: string
  /** Alternative italic `Z` and `z` with middle bar */
  cv43: string
  /** Alternative `,` and `;` with straight tail */
  cv61: string
  /** Alternative `?` with larger openings */
  cv62: string
  /** Alternative `<=` in arrow style */
  cv63: string
  /** Alternative `<=` and `>=` with horizen bottom bar */
  cv64: string
  /** Alternative `&` in handwriting style */
  cv65: string
  /** Full width quotes (`“` / `”` / `‘` / `’`) */
  cv96: string
  /** Full width ellipsis (`…`) */
  cv97: string
  /** Full width emdash (`—`) */
  cv98: string
  /** Traditional centered punctuations */
  cv99: string
  /** Broken multiple equals ligatures (`==`, `===`, `!=`, `!==` ...) */
  ss01: string
  /** Broken compare and equal ligatures (`<=`, `>=`) */
  ss02: string
  /** Allow to use any case in all tags */
  ss03: string
  /** Broken multiple underscores ligatures (`__`, `#__`) */
  ss04: string
  /** Revert thin backslash in escape symbols (`\\`, `\"`, `\.` ...) */
  ss05: string
  /** Break connected strokes between italic letters (`al`, `il`, `ull` ...) */
  ss06: string
  /** Relax the conditions for multiple greaters ligatures (`>>` or `>>>`) */
  ss07: string
  /** Double headed arrows and reverse arrows ligatures (`>>=`, `-<<`, `->>`, `>>-` ...) */
  ss08: string
  /** Asciitilde equal as not equal to ligature (`~=`) */
  ss09: string
  /** Approximately equal to and approximately not equal to ligatures (`=~`, `!~`) */
  ss10: string
  /** Equal and extra punctuation ligatures (`|=`, `/=`, `?=`, `&=`, ...) */
  ss11: string
  /** Dot style `0` */
  zero: string
}

export const featureArray = [
  "calt",
  "cv01",
  "cv02",
  "cv03",
  "cv04",
  "cv05",
  "cv06",
  "cv07",
  "cv08",
  "cv09",
  "cv10",
  "cv31",
  "cv32",
  "cv33",
  "cv34",
  "cv35",
  "cv36",
  "cv37",
  "cv38",
  "cv39",
  "cv40",
  "cv41",
  "cv42",
  "cv43",
  "cv61",
  "cv62",
  "cv63",
  "cv64",
  "cv65",
  "cv96",
  "cv97",
  "cv98",
  "cv99",
  "ss01",
  "ss02",
  "ss03",
  "ss04",
  "ss05",
  "ss06",
  "ss07",
  "ss08",
  "ss09",
  "ss10",
  "ss11",
  "zero"
]

export const normalFeatureArray = [
  "cv01",
  "cv02",
  "cv33",
  "cv34",
  "cv35",
  "cv36",
  "cv61",
  "cv62",
  "ss05",
  "ss06",
  "ss07",
  "ss08"
]
